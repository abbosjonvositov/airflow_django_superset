version: '3.8'

services:
  postgres_db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    env_file:
      - .env  # Load environment variables from .env file
    environment:
      POSTGRES_DB: ${SQL_NAME}
      POSTGRES_USER: ${SQL_USER}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      retries: 5
      start_period: 10s

  airflow:
    build: ./airflow  # Use the custom Airflow Dockerfile
    container_name: airflow_webserver
    restart: always
    depends_on:
      postgres_db:
        condition: service_healthy  # Ensure PostgreSQL is ready
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${SQL_USER}:${SQL_PASSWORD}@postgres_db:5432/${SQL_NAME}
      AIRFLOW__CORE__FERNET_KEY: 'IXsN7r2LPXSjCqgakzZMeTT3xlDr0Wo27ETyM5BGLNk='
      AIRFLOW__WEBSERVER__RBAC: "True"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    ports:
      - "8080:8080"
    env_file:
      - .env  # Load environment variables from .env file
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/etl:/opt/airflow/etl
      - ./airflow/ml_pipeline:/opt/airflow/ml_pipeline
      - ./real_estate_dash:/opt/airflow/django_project  # Mount Django project inside Airflow
      - ./shared_data:/shared_data
    command: >
      bash -c "until pg_isready -h postgres_db -p 5432 -U ${SQL_USER}; do sleep 2; done &&
               airflow db init &&
               airflow db upgrade &&
               airflow users create --username admin --password admin --firstname Airflow --lastname Admin --role Admin --email admin@example.com &&
               airflow webserver & sleep 10 && airflow scheduler"

  django_app:
    build: ./real_estate_dash
    container_name: django_app
    restart: always
    depends_on:
      postgres_db:
        condition: service_healthy  # Wait for PostgreSQL to be ready
    env_file:
      - .env  # Load environment variables from .env file
    environment:
      DJANGO_SETTINGS_MODULE: real_estate_dash.settings
    ports:
      - "8000:8000"
    volumes:
      - ./real_estate_dash:/app
      - ./shared_data:/shared_data
    command: >
      bash -c "until pg_isready -h postgres_db -p 5432 -U ${SQL_USER}; do sleep 2; done &&
               python manage.py makemigrations &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"

  superset:
    image: apache/superset:4.1.2
    container_name: superset
    restart: always
    depends_on:
      postgres_db:
        condition: service_healthy  # Ensure MySQL is ready
    env_file:
      - .env  # Load environment variables from .env file
    environment:
      SUPERSET_WEBSERVER_PORT: 8088
      SUPERSET_SECRET_KEY: 'mysecretkey123'
      SUPERSET_CONFIG_PATH: /app/superset_config.py
    ports:
      - "8088:8088"
    volumes:
      - ./superset:/home/superset  # Mount your cloned directory here
      - ./superset/superset_config.py:/app/superset_config.py
      - ./superset_home:/app/superset_home
    command: >
      bash -c "pip install -r /home/superset/req.txt &&
               superset db upgrade &&
               superset init &&
               superset fab create-admin --username admin --password admin --firstname Superset --lastname Admin --email admin@example.com &&
               superset run -h 0.0.0.0 -p 8088"
volumes:
  postgres_data:
  mysql_data:
